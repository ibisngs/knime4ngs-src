#!/bin/bash
#  Copyright (C) 2016 the Knime4NGS contributors.
#  Website: http://ibisngs.github.io/knime4ngs
#  
#  This file is part of the KNIME4NGS KNIME extension.
#  
#  The KNIME4NGS extension is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Filtersettings file, as generated by FastQC with JH-MOD
# Mail to jonathan.hoser@helmholtz-muenchen.de for questions,bugs and other information.
#
#
#
# Filtersettings for 69095_f.fq
# Filename: 69095_f.fq.filterSettings
# Original save-location: 69095_f.fq_fastqc.filterSettings
#
#FILENAME	69095_f.fq
#FILTERSETTINGSFILENAME	69095_f.fq_fastqc.filterSettings
#FILETYPE	Conventional base calls
#FILEENCODING	Sanger / Illumina 1.9
#SEQCOUNT	55423550
#DISCARDTHRESHOLD	10
#TRIMTHRESHOLD	15
#ADAPTERFILTERING	false
#NFILTERING	true
#POLYATFILTERING	false

fsetting1=$1
fsetting2=$2
fsettingout=$3
fso=$fsettingout

if [ ! -e $fsetting1 ]; then
	echo "File $fsetting1 does not exist."
	echo "aborting!"
	exit
fi

if [ ! -e $fsetting2 ]; then
        echo "File $fsetting2 does not exist."
        echo "aborting!"
        exit
fi

if [ -e $fso ]; then
        echo "File $fso does exist. We will overwrite it."
        echo "Just that you know!"
fi

cat $fsetting1 > $fso
sed -i "s|${fsetting1}|${fso}|g" $fso

function getValue {
	file=$1
	getwhat=$2
	local res=`grep "^${getwhat}" ${file} | cut -f 2`
	echo "$res"
}

ft1=`getValue $fso FILETYPE`
ft2=`getValue $fsetting2 FILETYPE`

fenc1=`getValue $fso FILEENCODING`
fenc2=`getValue $fsetting2 FILEENCODING`

seqc1=`getValue $fso SEQCOUNT`
seqc2=`getValue $fsetting2 SEQCOUNT`

dth1=`getValue $fso DISCARDTHRESHOLD`
dth2=`getValue $fsetting2 DISCARDTHRESHOLD`

tth1=`getValue $fso TRIMTHRESHOLD`
tth2=`getValue $fsetting2 TRIMTHRESHOLD`

adf1=`getValue $fso ADAPTERFILTERING`
adf2=`getValue $fsetting2 ADAPTERFILTERING`

nf1=`getValue $fso NFILTERING`
nf2=`getValue $fsetting2 NFILTERING`

paf1=`getValue $fso POLYATFILTERING`
paf2=`getValue $fsetting2 POLYATFILTERING`

merge=""
mergedoable=""

if [ "${ft1}" == "${ft2}" ]; then
	merge="${merge}"
else
	merge="${merge} Filetype differs!";
fi

if [ "${fenc1}" == "${fenc2}" ]; then
        merge="${merge}"
else
        merge="${merge} FileEncoding differs!";
fi

if [ "${seqc1}" == "${seqc2}" ]; then
        merge="${merge}"
else
        merge="${merge} SequenceCount differs!";
fi

dth=""
tth=""
adf=""
nf=""
paf=""

if [ "${dth1}" == "${dth2}" ]; then
        merge="${merge}"
	dth=${dth1}
else
        mergedoable="${mergedoable} DiscardThreshold differs!";
	#we take the smaller value==less conservative, but loosing less reads.
        if [[ "$dth1" -lt "$dth2" ]]; then
                echo " $dth1 is smaller than $dth2 - taking it as param."
                dth=$dth1
        else
                echo " $dth2 is smaller than $dth1 - taking it as param."
                dth=$dth2
        fi
fi

if [ "${tth1}" == "${tth2}" ]; then
        merge="${merge}"
	tth=${tth1}
else
        mergedoable="${mergedoable} TrimThreshold differs!";
	#we take the smaller value==less conservative, but loosing less reads.
	if [[ "$tth1" -lt "$tth2" ]]; then
		echo " $tth1 is smaller than $tth2 - taking it as param."
		tth=$tth1
	else
		echo " $tth2 is smaller than $tth1 - taking it as param."
		tth=$tth2
	fi
fi

if [ "${adf1}" == "${adf2}" ]; then
        merge="${merge}"
	adf=${adf1}
else
        mergedoable="${mergedoable} AdapterFiltering flag differs!";
	#if both are false, ok. if both are true, ok.
	#if they are mixed, we better filter.
	adf="true"
fi

if [ "${nf1}" == "${nf2}" ]; then
        merge="${merge}"
	nf=${nf1}
else
        mergedoable="${mergedoable} Nfiltering flag differs!";
	#if both are false, ok. if both are true, ok.
        #if they are mixed, we better filter.
        nf="true"
fi

#echo "prepafdebug: dth=${dth} tth=${tth} adf=${adf} nf=${nf} paf=${paf}"

if [ "${paf1}" == "${paf2}" ]; then
        merge="${merge}"
	paf=${paf1}
else
        mergedoable="${mergedoable} Poly-AFiltering flag differs!";
	#if both are false, ok. if both are true, ok.
        #if they are mixed, we better filter.
        paf="true"
fi


function addFileName {
	fso=$1
	f2=$2
	fn1=`getValue $fso FILENAME`
	fn2=`getValue ${f2} FILENAME`
	#echo "Debug: fn1=$fn1 fn2=$fn2"
	sed -i "s|${fn1}|${fn1};${fn2}|g" $fso
}

function addSeqCount {
        fso=$1
        f2=$2
        fn1=$3
        fn2=$4
        #echo "Debug: fn1=$fn1 fn2=$fn2"
        sed -i "s|${fn1}|${fn1};${fn2}|g" $fso
}

function setDiffs {
	fso=$1
	dth=$2
	tth=$3
	adf=$4
	nf=$5
	paf=$6
#	echo "debug: dth=${dth} tth=${tth} adf=${adf} nf=${nf} paf=${paf}"	
	sed -i "s|DISCARDTHRESHOLD.*|DISCARDTHRESHOLD\t${dth}|g" $fso
	sed -i "s|TRIMTHRESHOLD.*|TRIMTHRESHOLD\t${tth}|g" $fso
	sed -i "s|ADAPTERFILTERING.*|ADAPTERFILTERING\t${adf}|g" $fso
	sed -i "s|NFILTERING.*|NFILTERING\t${nf}|g" $fso
	sed -i "s|POLYATFILTERING.*|POLYATFILTERING\t${paf}|g" $fso
}

#echo "predecdebug: dth=${dth} tth=${tth} adf=${adf} nf=${nf} paf=${paf}"

if [ "x${merge}" == "x" ]; then
	echo "Filtersetting-Files can be merged! working..."

	if [ "x${mergedoable}" == "x" ]; then
		#merge
		#addFileName
		addFileName $fso $fsetting2
		addSeqCount $fso $fsetting2 $seqc1 $seqc2
	else
		echo "There are some differences (see below), but I think I can do a merge."
		echo "${mergedoable}"
		#special logic for mergeing.
		addFileName $fso $fsetting2
		addSeqCount $fso $fsetting2 $seqc1 $seqc2
		setDiffs $fso $dth $tth $adf $nf $paf	
	fi
	
else
	echo "Filtersettings Differ to much; critical issues:"
	echo $merge
	echo "Please do a manual edit of $fso"
fi



